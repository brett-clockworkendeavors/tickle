#!/usr/bin/php
<?php
//remove the program name from argv
array_shift($argv);
$argc--;

$options = getopt("hv");
foreach(array_keys($options) as $option)
{
	//remove options from argv
	array_shift($argv);
	$argc--;
	if($options[$option])
		array_shift($argv);
		
	switch($option)
	{
	case 'h':
		usage();
		break;
	case 'v':
		echo "Redcopy Version 0.1\n";
		break;
	default:
		usage();
		break;
	}
}

if($argc)
	$issueNumber = array_shift($argv);
else
	usage();
	
$apiKeysForUrls = getConfig("config/urlAndApiKey.csv");
$sourceAndDestinationUrls = getSourceAndDestinationUrls("config/sourceAndDestination.csv");
$destinationProjectIds = getDestinationProjectIds("config/sourceAndDestination.csv", $apiKeysForUrls);
$sourceIssue = getIssue($sourceAndDestinationUrls['source'], $apiKeysForUrls[$sourceAndDestinationUrls['source']], $issueNumber);
$destinationIssue = changeIssueForSending($sourceIssue, $destinationProjectIds, $sourceAndDestinationUrls['source']);
$header = sendIssueToRedmine($destinationIssue, $sourceAndDestinationUrls['destination'],$apiKeysForUrls[$sourceAndDestinationUrls['destination']]);
$copyStatus = findStatusFromHeader($header);
$copyStatus = trim($copyStatus);
echo $copyStatus."\n";

function usage()
{
	echo "Usage: redcopy [options...] issuenumber\n";
	echo "Options\n";
	echo "-h  Display usage\n"; 
	echo "-v  display the current version number\n";
	exit();
}

function getConfig($fileName)
{
	$config = array();
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	while(!feof($file))
	{
		$configCsvLine = fgetcsv($file);
		$config[$configCsvLine[0]] = $configCsvLine[1];
	}
	
	return $config;
}

function getSourceAndDestinationUrls($fileName)
{
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	$urlCsvLine = fgetcsv($file);
	$urls['source'] = $urlCsvLine[0];
	$urls['destination'] = $urlCsvLine[1];
	fclose($file);
	return $urls;
}

function getDestinationProjectIds($fileName,$apiKeysForUrls)
{
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	$urls = fgetcsv($file);
	$destinationProjects = getProjectsFromRedmineAsArray($urls[1], $apiKeysForUrls[$urls[1]]);
	while(!feof($file))
	{
		$oneCsvLine = fgetcsv($file);
		foreach($destinationProjects as $project)
		{
			if($oneCsvLine[1] == $project['name'])
			{
				$fromTo[$oneCsvLine[0]] = $project['id'];
				continue;
			}
		}
	}
	fclose($file);
	return $fromTo;
}

function getIssue ($url, $apiKey, $issueNumber)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $url."/issues/".$issueNumber.".json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, false);
	
	$transferReturned = curl_exec($curlHandle);
	curl_close($curlHandle);

	$issue = json_decode($transferReturned, true);
	return $issue['issue'];
}

function changeIssueForSending($sourceIssue, $destinationProjectIds, $sourceUrl)
{
	$sourceIssue['project']['id'] = $destinationProjectIds[$sourceIssue['project']['name']];
	$sourceIssue['description'] = $sourceIssue['description']."\nExternal Issue Link: ".$sourceUrl."/issues/".$sourceIssue['id'];
	return $sourceIssue;
}

function sendIssueToRedmine ($destinationIssue, $url, $apiKey)
{
	$sendIssue = createSendIssue($destinationIssue);
	$curlHandle = curl_init($url."/issues.json");
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $sendIssue);
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getRedmineJsonPostHeaders($sendIssue, $apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, true);
	curl_setopt($curlHandle, CURLOPT_FRESH_CONNECT, true);
	
	$transferReturned = curl_exec($curlHandle);
	
	curl_close($curlHandle);
	
	return $transferReturned;
}

function findStatusFromHeader($header)
{
	$headerArray = explode("\n",$header);
	$returnValue = preg_split("/HTTP\/1.1/", $headerArray[0]);
	return $returnValue[1];
}

function getProjectsFromRedmineAsArray($url, $apiKey)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $url."/projects.json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, false);
	
	$transferReturned = curl_exec($curlHandle);
	curl_close($curlHandle);

	$projects = json_decode($transferReturned, true);
	return $projects['projects'];
}

function getApiKeyHeader ($apiKey)
{
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;	
	return $headers;
}

function createSendIssue($issueFromRedmine)
{
	$sendIssue = array();
	$sendIssue['project_id'] = $issueFromRedmine['project']['id'];
	$sendIssue['tracker_id'] = $issueFromRedmine['tracker']['id'];
	$sendIssue['priority_id'] = $issueFromRedmine['priority']['id'];
	$sendIssue['subject'] = $issueFromRedmine['subject'];
	$sendIssue['description'] = $issueFromRedmine['description'];
	
	return json_encode(array("issue" => $sendIssue));
}

function getRedmineJsonPostHeaders ($jsonData, $apiKey)
{
	$headers[] = 'Content-Type: application/json';
	$headers[] = 'Content-Length: '. strlen($jsonData);
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;
	
	return $headers;
}

?>
