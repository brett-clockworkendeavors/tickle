#!/usr/bin/php
<?php
//remove the program name from argv
array_shift($argv);
$argc--;

$options = getopt("hv");
foreach(array_keys($options) as $option)
{
	//remove options from argv
	array_shift($argv);
	$argc--;
	if($options[$option])
		array_shift($argv);
		
	switch($option)
	{
	case 'h':
		usage();
		break;
	case 'v':
		echo "Redcopy Version 0.1\n";
		break;
	default:
		usage();
		break;
	}
}

if($argc)
	$issueNumber = array_shift($argv);
else
	usage();
	
$apiKeysForUrls = getConfig("config/urlAndApiKey.csv");
$sourceAndDestinationUrls = getSourceAndDestinationUrls("config/sourceAndDestination.csv");
$destinationProjectIds = getDestinationProjectIds("config/sourceAndDestination.csv", $apiKeysForUrls);
$sourceIssue = getIssue($sourceAndDestinationUrls['source'], $apiKeysForUrls[$sourceAndDestinationUrls['source']], $issueNumber);
var_dump($sourceIssue);
$destinationIssue = changeIssueForSending($sourceIssue, $destinationProjectIds, $sourceAndDestinationUrls['source']);
$header = sendIssueToRedmine($destinationIssue, $sourceAndDestinationUrls['destination'],$apiKeysForUrls[$sourceAndDestinationUrls['destination']]);
$copyStatus = findStatusFromHeader($header);
$copyStatus = trim($copyStatus);
if($copyStatus != "201 Created")
	echo "Issue not copied: ". $copyStatus."\n";

function usage()
{
	echo "Usage: redcopy [options...] issuenumber\n";
	echo "Options\n";
	echo "-h  Display usage\n"; 
	echo "-v  display the current version number\n";
	exit();
}

function getConfig($fileName)
{
	$config = array();
	$file = fopen($fileName, "r") or exit("Unable to open file ".$fileName);
	$line = 0;
	while(!feof($file))
	{
		$line++;
		$configCsvLine = fgetcsv($file);
		if(count($configCsvLine) == 2)
			$config[$configCsvLine[0]] = $configCsvLine[1];
		else
			echo $fileName . ":". $line. " - Wrong number of entries\n";
	}
	
	return $config;
}

function getSourceAndDestinationUrls($fileName)
{
	$file = fopen($fileName, "r") or exit("Unable to open file ".$fileName);
	$urlCsvLine = fgetcsv($file);
	
	if(count($urlCsvLine) != 2)
	{
		echo $fileName . ":1- Wrong number of entries\n";
		exit();
	}
		
	$urls['source'] = $urlCsvLine[0];
	$urls['destination'] = $urlCsvLine[1];
	fclose($file);
	return $urls;
}

function getDestinationProjectIds($fileName, $apiKeysForUrls)
{
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	
	$urls = fgetcsv($file);
	if(count($urls) != 2)
		echo $fileName . ":1- Wrong number of entries\n";
	
	if(!array_key_exists($urls[1], $apiKeysForUrls))
	{
		echo $urls[1]." - No Api Key\n";
		exit();
	}
	$destinationProjects = getProjectsFromRedmineAsArray($urls[1], $apiKeysForUrls[$urls[1]]);
	
	$lineNumber = 1;
	while(!feof($file))
	{
		$lineNumber++;
		$oneCsvLine = fgetcsv($file);
		if(count($oneCsvLine) != 2)
			echo $fileName . ":".$lineNumber." - Wrong number of entries\n";
		else
		{
			$found = false;
			foreach($destinationProjects as $project)
			{
				if($oneCsvLine[1] == $project['name'])
				{
					$fromTo[$oneCsvLine[0]] = $project['id'];
					$found = true;
					continue;
				}
			}
			if(!$found)
				echo $fileName .":".$lineNumber. "\n". $urls[1]. " : ". $oneCsvLine[1]. " - no such project\n";
		}
	}
	fclose($file);
	return $fromTo;
}

function getIssue ($url, $apiKey, $issueNumber)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $url."/issues/".$issueNumber.".json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, true);
	
	$transferReturned = curl_exec($curlHandle);
	list($header,$jsonData) = explode("\r\n\r\n", $transferReturned, 2);
	curl_close($curlHandle);

	$status = findStatusFromHeader($header);
	$status = trim($status);
	if($status != "200 OK")
	{
		echo "getIssue: ".$status. "\n";
		exit();
	}
	
	$issue = json_decode($jsonData, true);
	return $issue['issue'];
}

function changeIssueForSending($sourceIssue, $destinationProjectIds, $sourceUrl)
{
	if(!array_key_exists(($sourceIssue['project']['name']), $destinationProjectIds))
	{
		echo "Source Project ". $sourceIssue['project']['name']. " has no destination\n";
		exit();
	}
	$sourceIssue['project']['id'] = $destinationProjectIds[$sourceIssue['project']['name']];
	$sourceIssue['description'] = $sourceIssue['description']."\n\nExternal Issue Link: ".$sourceUrl."/issues/".$sourceIssue['id'];
	return $sourceIssue;
}

function sendIssueToRedmine ($destinationIssue, $url, $apiKey)
{
	$sendIssue = createSendIssue($destinationIssue);
	$curlHandle = curl_init($url."/issues.json");
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $sendIssue);
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getRedmineJsonPostHeaders($sendIssue, $apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, true);
	curl_setopt($curlHandle, CURLOPT_FRESH_CONNECT, true);
	
	$transferReturned = curl_exec($curlHandle);
	
	curl_close($curlHandle);
	
	return $transferReturned;
}

function findStatusFromHeader($header)
{
	$headerArray = explode("\n",$header);
	$returnValue = preg_split("/HTTP\/1.1/", $headerArray[0]);
	return $returnValue[1];
}

function getProjectsFromRedmineAsArray($url, $apiKey)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $url."/projects.json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($apiKey));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, true);
	
	$transferReturned = curl_exec($curlHandle);
	list($header,$jsonData) = explode("\r\n\r\n", $transferReturned, 2);
	
	curl_close($curlHandle);

	$status = findStatusFromHeader($header);
	$status = trim($status);
	if($status != "200 OK")
	{
		echo "getProjectsFromRedmineAsArray: ".$status. "\n";
		exit();
	}
	
	$projects = json_decode($jsonData, true);
	return $projects['projects'];
}

function getApiKeyHeader ($apiKey)
{
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;	
	return $headers;
}

function createSendIssue($issueFromRedmine)
{
	$sendIssue = array();
	
	$sendIssue['project_id'] = $issueFromRedmine['project']['id'];
	
	if(array_key_exists('tracker',$issueFromRedmine))
		$sendIssue['tracker_id'] = $issueFromRedmine['tracker']['id'];
		
	if(array_key_exists('priority',$issueFromRedmine))
		$sendIssue['priority_id'] = $issueFromRedmine['priority']['id'];
	
	if(array_key_exists('subject',$issueFromRedmine))
		$sendIssue['subject'] = $issueFromRedmine['subject'];
	
	if(array_key_exists('description',$issueFromRedmine))
		$sendIssue['description'] = $issueFromRedmine['description'];
	
	if(array_key_exists('estimated_hours',$issueFromRedmine))
		$sendIssue['estimated_hours'] = $issueFromRedmine['estimated_hours'];
	
	if(array_key_exists('start_date',$issueFromRedmine))
		$sendIssue['start_date'] = $issueFromRedmine['start_date'];
	
	if(array_key_exists('due_date',$issueFromRedmine))
		$sendIssue['due_date'] = $issueFromRedmine['due_date'];
	
	if(array_key_exists('custom_fields',$issueFromRedmine))
		$sendIssue['custom_fields'] = $issueFromRedmine['custom_fields'];
	
	return json_encode(array("issue" => $sendIssue));
}

function getRedmineJsonPostHeaders ($jsonData, $apiKey)
{
	$headers[] = 'Content-Type: application/json';
	$headers[] = 'Content-Length: '. strlen($jsonData);
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;
	
	return $headers;
}

?>
