#!/usr/bin/php
<?php
//remove the program name from argv
array_shift($argv);
$argc--;

$options = getopt("hv");
foreach(array_keys($options) as $option)
{
	//remove options from argv
	array_shift($argv);
	$argc--;
	if($options[$option])
		array_shift($argv);
		
	switch($option)
	{
	case 'h':
		usage();
		break;
	case 'v':
		echo "Redcopy Version 0.1\n";
		break;
	default:
		usage();
		break;
	}
}

if($argc)
	$issuenumber = array_shift($argv);
else
	usage();
	
$copyFrom = getConfig("config/copyFromConfig.csv");
$copyTo = getConfig("config/copyToConfig.csv");
$fromTo = getFromTo("config/configFromTo.csv",$copyFrom, $copyTo);
$issueFrom = getIssueFromAsArray($copyFrom, $issuenumber);
$issueTo = changeIssueForSending($issueFrom, $fromTo, $copyFrom);
$header = sendIssueToRedmine($issueTo, $copyTo);
$copyStatus = findStatusFromHeader($header);
$copyStatus = trim($copyStatus);
echo $copyStatus."\n";

function usage()
{
	echo "Usage: redcopy [options...] issuenumber\n";
	echo "Options\n";
	echo "-h  Display usage\n"; 
	echo "-v  display the current version number\n";
	exit();
}

function getConfig($fileName)
{
	$config = array();
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	while(!feof($file))
	{
		$configCsvLine = fgetcsv($file);
		$configParamaters["url"] = $configCsvLine[0];
		$configParamaters["apiKey"] = $configCsvLine[1];
		$config[]=$configParamaters;
	}
	
	return $config;
}

function getFromTo($fileName,$copyFrom, $copyTo)
{
	$projects = getProjectsAsArray($copyTo);
	$file = fopen($fileName, "r") or exit("Unable to open file.");
	$urlCsvLine = fgetcsv($file);
	if(!areUrlsRight($urlCsvLine[0], $copyFrom))
	{
		echo "from URLs don't match\n";
		exit();
	}
	if(!areUrlsRight($urlCsvLine[1], $copyTo))
	{
		echo "to URLs don't match\n";
		exit();
	}
	while(!feof($file))
	{
		$oneCsvLine = fgetcsv($file);
		foreach($projects as $project)
		{
			if($oneCsvLine[1] == $project['name'])
			{
				$fromTo[$oneCsvLine[0]] = $project['id'];
				continue;
			}
		}
	}
	return $fromTo;
}

function getIssueFromAsArray ($copyFrom, $issuenumber)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $copyFrom[0]["url"]."/issues/".$issuenumber.".json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($copyFrom[0]["apiKey"]));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, false);
	
	$transferReturned = curl_exec($curlHandle);
	curl_close($curlHandle);

	$issueFrom = json_decode($transferReturned, true);
	return $issueFrom['issue'];
}

function changeIssueForSending($issueFrom, $fromTo, $copyFrom)
{
	$issueFrom['project']['id'] = $fromTo[$issueFrom['project']['name']];
	$issueFrom['description'] = $issueFrom['description']."\nExternal Issue Link: ".$copyFrom[0]['url']."/issues/".$issueFrom['id'];
	return $issueFrom;
}

function sendIssueToRedmine ($issueTo, $copyTo)
{
	$issue = createNewIssue($issueTo);
	$curlHandle = curl_init($copyTo[0]["url"]."/issues.json");
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $issue);
	curl_setopt($curlHandle, CURLOPT_POST, true);
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getRedmineJsonPostHeaders($issue, $copyTo[0]["apiKey"]));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, true);
	curl_setopt($curlHandle, CURLOPT_FRESH_CONNECT, true);
	
	$transferReturned = curl_exec($curlHandle);
	
	curl_close($curlHandle);
	
	return $transferReturned;
}

function findStatusFromHeader($header)
{
	$headerArray = explode("\n",$header);
	$returnValue = preg_split("/HTTP\/1.1/", $headerArray[0]);
	return $returnValue[1];
}

function areUrlsRight($newUrl, $copy)
{
	if($newUrl == $copy[0]['url'])
		return true;
	return false;
}
function getProjectsAsArray($copy)
{
	$curlHandle = curl_init();
	curl_setopt($curlHandle, CURLOPT_URL, $copy[0]["url"]."/projects.json");
	curl_setopt($curlHandle, CURLOPT_HTTPHEADER, getApiKeyHeader($copy[0]["apiKey"]));
	curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($curlHandle, CURLOPT_HEADER, false);
	
	$transferReturned = curl_exec($curlHandle);
	curl_close($curlHandle);

	$projects = json_decode($transferReturned, true);
	return $projects['projects'];
}

function createNewIssue($issueTo)
{
	$newIssue = array();
	$newIssue['project_id'] = $issueTo['project']['id'];
	$newIssue['tracker_id'] = $issueTo['tracker']['id'];
	$newIssue['priority_id'] = $issueTo['priority']['id'];
	$newIssue['subject'] = $issueTo['subject'];
	$newIssue['description'] = $issueTo['description'];
	
	return json_encode(array("issue" => $newIssue));
}

function getApiKeyHeader ($apiKey)
{
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;	
	return $headers;
}

function getRedmineJsonPostHeaders ($jsonData, $apiKey)
{
	$headers[] = 'Content-Type: application/json';
	$headers[] = 'Content-Length: '. strlen($jsonData);
	$headers[] = 'X-Redmine-API-Key: '. $apiKey;
	
	return $headers;
}

?>
